services:
  # === Database ===
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === NestJS Backend ===
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-net

  # === Directus ===
  directus:
    image: directus/directus:latest
    container_name: directus
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./directus/directus/uploads:/directus/uploads
      - ./directus/directus/extensions:/directus/extensions
      - ./directus/directus/migrations:/directus/migrations
    environment:
      # Переопределяем переменные специфичные для Directus
      KEY: ${DIRECTUS_KEY}
      SECRET: ${DIRECTUS_SECRET}
      PORT: ${DIRECTUS_PORT}
      DB_CLIENT: pg
      DB_DATABASE: ${DB_NAME}
    networks:
      - app-net

  # === Frontend (React) ===
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    networks:
      - app-net

  # === Reverse Proxy (Nginx) ===
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - backend
      - directus
      - frontend
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    networks:
      - app-net

networks:
  app-net:
    driver: bridge
