services:
  # === Database ===
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === Миграции ===
  migrations:
    build:
      context: ./server
      dockerfile: Dockerfile.migrations
    container_name: migrations
    env_file:
      - .env
    environment:
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-net
    command: npm run migration:run
    restart: "no"  # Выполнить один раз и остановиться

  # === NestJS Backend ===
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
    depends_on:
      migrations:
        condition: service_completed_successfully  # Ждать выполнения миграций
      postgres:
        condition: service_healthy
      directus:
        condition: service_healthy 
    networks:
      - app-net

  # === Directus ===
  directus:
    image: directus/directus:latest
    container_name: directus
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./directus/directus/uploads:/directus/uploads
      - ./directus/directus/extensions:/directus/extensions
      - ./directus/directus/migrations:/directus/migrations
    environment:
      # Переопределяем переменные специфичные для Directus
      KEY: ${DIRECTUS_KEY}
      SECRET: ${DIRECTUS_SECRET}
      PORT: ${DIRECTUS_PORT}
      PUBLIC_URL: http://localhost/cms

      DB_CLIENT: pg
      DB_DATABASE: ${DB_NAME}
      DB_HOST: ${DB_HOST}      
      DB_PORT: ${DB_PORT}          
      DB_USER: ${DB_USER}    
      DB_PASSWORD: ${DB_PASSWORD}  

      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      WEBSOCKETS_ENABLED: ${WEBSOCKETS_ENABLED}

      CORS_ENABLED: ${CORS_ENABLED}
      CORS_ORIGIN: ${CORS_ORIGIN}

      REFRESH_TOKEN_COOKIE_SECURE: ${REFRESH_TOKEN_COOKIE_SECURE}
      REFRESH_TOKEN_COOKIE_SAME_SITE: ${REFRESH_TOKEN_COOKIE_SAME_SITE}
      REFRESH_TOKEN_DOMAIN: ${REFRESH_TOKEN_COOKIE_DOMAIN}

      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE}
      SESSION_COOKIE_SAME_SITE: ${SESSION_COOKIE_SAME_SITE}
      SESSION_COOKIE_DOMAIN: ${SESSION_COOKIE_DOMAIN}

      EXTENSIONS_PATH: ${EXTENSIONS_PATH}
      EXTENSIONS_AUTO_RELOAD: ${EXTENSIONS_AUTO_RELOAD}

      CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC: ${CONTENT_SECURITY_POLICY_DIRECTIVES__FRAME_SRC}

      # EMAIL_TRANSPORT: ${EMAIL_TRANSPORT}
      # EMAIL_FROM: ${EMAIL_FROM}
      # EMAIL_SMTP_HOST: ${EMAIL_SMTP_HOST}
      # EMAIL_SMTP_PORT: ${EMAIL_SMTP_PORT}
      # EMAIL_SMTP_USER: ${EMAIL_SMTP_USER}
      # EMAIL_SMTP_PASSWORD: ${EMAIL_SMTP_PASSWORD}


    healthcheck:
      test: ["CMD-SHELL", "nc -z 0.0.0.0 8055 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s  # увеличьте для медленного старта

    networks:
      - app-net

  # === Frontend (React) ===
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: frontend
    restart: unless-stopped
    volumes:
      - frontend-dist:/usr/share/nginx/html
    networks:
      - app-net

  # === Reverse Proxy (Nginx) ===
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - backend
      - directus
      - frontend
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend-dist:/usr/share/nginx/html:ro
    networks:
      - app-net

volumes:
  frontend-dist:

networks:
  app-net:
    driver: bridge
